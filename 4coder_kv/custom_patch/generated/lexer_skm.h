#if !defined(FCODER_LEX_GEN_HAND_WRITTEN_TYPES)
#define FCODER_LEX_GEN_HAND_WRITTEN_TYPES

struct Lexeme_Table_Value{
    Token_Base_Kind base_kind;
    u16 sub_kind;
};

struct Lexeme_Table_Lookup{
    b32 found_match;
    Token_Base_Kind base_kind;
    u16 sub_kind;
};

#endif
typedef u16 Token_Skm_Kind;
enum{
TokenSkmKind_EOF = 0,
TokenSkmKind_Whitespace = 1,
TokenSkmKind_LexError = 2,
TokenSkmKind_BlockComment = 3,
TokenSkmKind_LineComment = 4,
TokenSkmKind_Backslash = 5,
TokenSkmKind_LiteralInteger = 6,
TokenSkmKind_LiteralIntegerU = 7,
TokenSkmKind_LiteralIntegerL = 8,
TokenSkmKind_LiteralIntegerUL = 9,
TokenSkmKind_LiteralIntegerLL = 10,
TokenSkmKind_LiteralIntegerULL = 11,
TokenSkmKind_LiteralIntegerHex = 12,
TokenSkmKind_LiteralIntegerHexU = 13,
TokenSkmKind_LiteralIntegerHexL = 14,
TokenSkmKind_LiteralIntegerHexUL = 15,
TokenSkmKind_LiteralIntegerHexLL = 16,
TokenSkmKind_LiteralIntegerHexULL = 17,
TokenSkmKind_LiteralIntegerOct = 18,
TokenSkmKind_LiteralIntegerOctU = 19,
TokenSkmKind_LiteralIntegerOctL = 20,
TokenSkmKind_LiteralIntegerOctUL = 21,
TokenSkmKind_LiteralIntegerOctLL = 22,
TokenSkmKind_LiteralIntegerOctULL = 23,
TokenSkmKind_LiteralFloat32 = 24,
TokenSkmKind_LiteralFloat64 = 25,
TokenSkmKind_LiteralString = 26,
TokenSkmKind_LiteralStringWide = 27,
TokenSkmKind_LiteralStringUTF8 = 28,
TokenSkmKind_LiteralStringUTF16 = 29,
TokenSkmKind_LiteralStringUTF32 = 30,
TokenSkmKind_LiteralStringRaw = 31,
TokenSkmKind_LiteralStringWideRaw = 32,
TokenSkmKind_LiteralStringUTF8Raw = 33,
TokenSkmKind_LiteralStringUTF16Raw = 34,
TokenSkmKind_LiteralStringUTF32Raw = 35,
TokenSkmKind_LiteralCharacter = 36,
TokenSkmKind_LiteralCharacterWide = 37,
TokenSkmKind_LiteralCharacterUTF8 = 38,
TokenSkmKind_LiteralCharacterUTF16 = 39,
TokenSkmKind_LiteralCharacterUTF32 = 40,
TokenSkmKind_PPIncludeFile = 41,
TokenSkmKind_PPErrorMessage = 42,
TokenSkmKind_KeywordGeneric = 43,
TokenSkmKind_BraceOp = 44,
TokenSkmKind_BraceCl = 45,
TokenSkmKind_ParenOp = 46,
TokenSkmKind_BrackOp = 47,
TokenSkmKind_ParenCl = 48,
TokenSkmKind_BrackCl = 49,
TokenSkmKind_Semicolon = 50,
TokenSkmKind_DotDotDot = 51,
TokenSkmKind_Colon = 52,
TokenSkmKind_ColonColon = 53,
TokenSkmKind_ColonEq = 54,
TokenSkmKind_Dot = 55,
TokenSkmKind_Plus = 56,
TokenSkmKind_Minus = 57,
TokenSkmKind_Bang = 58,
TokenSkmKind_Tilde = 59,
TokenSkmKind_Star = 60,
TokenSkmKind_Amp = 61,
TokenSkmKind_DotStar = 62,
TokenSkmKind_Slash = 63,
TokenSkmKind_Percent = 64,
TokenSkmKind_MinusGrtr = 65,
TokenSkmKind_EqGrtr = 66,
TokenSkmKind_DotDot = 67,
TokenSkmKind_LeftLeft = 68,
TokenSkmKind_RightRight = 69,
TokenSkmKind_Less = 70,
TokenSkmKind_LessEq = 71,
TokenSkmKind_Grtr = 72,
TokenSkmKind_GrtrEq = 73,
TokenSkmKind_EqEq = 74,
TokenSkmKind_BangEq = 75,
TokenSkmKind_Carrot = 76,
TokenSkmKind_Pipe = 77,
TokenSkmKind_AmpAmp = 78,
TokenSkmKind_PipePipe = 79,
TokenSkmKind_Question = 80,
TokenSkmKind_Eq = 81,
TokenSkmKind_PlusEq = 82,
TokenSkmKind_MinusEq = 83,
TokenSkmKind_StarEq = 84,
TokenSkmKind_SlashEq = 85,
TokenSkmKind_PercentEq = 86,
TokenSkmKind_LeftLeftEq = 87,
TokenSkmKind_RightRightEq = 88,
TokenSkmKind_Comma = 89,
TokenSkmKind_AlignOf = 90,
TokenSkmKind_Operator = 91,
TokenSkmKind_Null = 92,
TokenSkmKind_Inline = 93,
TokenSkmKind_Using = 94,
TokenSkmKind_Any = 95,
TokenSkmKind_Void = 96,
TokenSkmKind_String = 97,
TokenSkmKind_Bool = 98,
TokenSkmKind_Float = 99,
TokenSkmKind_Float32 = 100,
TokenSkmKind_Float64 = 101,
TokenSkmKind_Int = 102,
TokenSkmKind_U8 = 103,
TokenSkmKind_U16 = 104,
TokenSkmKind_U32 = 105,
TokenSkmKind_U64 = 106,
TokenSkmKind_S8 = 107,
TokenSkmKind_S16 = 108,
TokenSkmKind_S32 = 109,
TokenSkmKind_S64 = 110,
TokenSkmKind_Struct = 111,
TokenSkmKind_Union = 112,
TokenSkmKind_Enum = 113,
TokenSkmKind_SizeOf = 114,
TokenSkmKind_New = 115,
TokenSkmKind_Delete = 116,
TokenSkmKind_Defer = 117,
TokenSkmKind_Autocast = 118,
TokenSkmKind_Remove = 119,
TokenSkmKind_PushContext = 120,
TokenSkmKind_Uninitialized = 121,
TokenSkmKind_It = 122,
TokenSkmKind_ItIndex = 123,
TokenSkmKind_Context = 124,
TokenSkmKind_Break = 125,
TokenSkmKind_Case = 126,
TokenSkmKind_Continue = 127,
TokenSkmKind_Default = 128,
TokenSkmKind_Do = 129,
TokenSkmKind_Else = 130,
TokenSkmKind_For = 131,
TokenSkmKind_Goto = 132,
TokenSkmKind_If = 133,
TokenSkmKind_Return = 134,
TokenSkmKind_Switch = 135,
TokenSkmKind_While = 136,
TokenSkmKind_Cast = 137,
TokenSkmKind_LiteralTrue = 138,
TokenSkmKind_LiteralFalse = 139,
TokenSkmKind_Identifier = 140,
TokenSkmKind_PPInclude = 141,
TokenSkmKind_PPVersion = 142,
TokenSkmKind_PPDefine = 143,
TokenSkmKind_PPUndef = 144,
TokenSkmKind_PPIfDef = 145,
TokenSkmKind_PPIfNDef = 146,
TokenSkmKind_PPElse = 147,
TokenSkmKind_PPElIf = 148,
TokenSkmKind_PPEndIf = 149,
TokenSkmKind_PPError = 150,
TokenSkmKind_PPUsing = 151,
TokenSkmKind_PPLine = 152,
TokenSkmKind_PPIf = 153,
TokenSkmKind_PPImport = 154,
TokenSkmKind_PPPragma = 155,
TokenSkmKind_PPLoad = 156,
TokenSkmKind_PPUnknown = 157,
TokenSkmKind_PPDefined = 158,
TokenSkmKind_COUNT = 159,
};
char *token_skm_kind_names[] = {
"EOF",
"Whitespace",
"LexError",
"BlockComment",
"LineComment",
"Backslash",
"LiteralInteger",
"LiteralIntegerU",
"LiteralIntegerL",
"LiteralIntegerUL",
"LiteralIntegerLL",
"LiteralIntegerULL",
"LiteralIntegerHex",
"LiteralIntegerHexU",
"LiteralIntegerHexL",
"LiteralIntegerHexUL",
"LiteralIntegerHexLL",
"LiteralIntegerHexULL",
"LiteralIntegerOct",
"LiteralIntegerOctU",
"LiteralIntegerOctL",
"LiteralIntegerOctUL",
"LiteralIntegerOctLL",
"LiteralIntegerOctULL",
"LiteralFloat32",
"LiteralFloat64",
"LiteralString",
"LiteralStringWide",
"LiteralStringUTF8",
"LiteralStringUTF16",
"LiteralStringUTF32",
"LiteralStringRaw",
"LiteralStringWideRaw",
"LiteralStringUTF8Raw",
"LiteralStringUTF16Raw",
"LiteralStringUTF32Raw",
"LiteralCharacter",
"LiteralCharacterWide",
"LiteralCharacterUTF8",
"LiteralCharacterUTF16",
"LiteralCharacterUTF32",
"PPIncludeFile",
"PPErrorMessage",
"KeywordGeneric",
"BraceOp",
"BraceCl",
"ParenOp",
"BrackOp",
"ParenCl",
"BrackCl",
"Semicolon",
"DotDotDot",
"Colon",
"ColonColon",
"ColonEq",
"Dot",
"Plus",
"Minus",
"Bang",
"Tilde",
"Star",
"Amp",
"DotStar",
"Slash",
"Percent",
"MinusGrtr",
"EqGrtr",
"DotDot",
"LeftLeft",
"RightRight",
"Less",
"LessEq",
"Grtr",
"GrtrEq",
"EqEq",
"BangEq",
"Carrot",
"Pipe",
"AmpAmp",
"PipePipe",
"Question",
"Eq",
"PlusEq",
"MinusEq",
"StarEq",
"SlashEq",
"PercentEq",
"LeftLeftEq",
"RightRightEq",
"Comma",
"AlignOf",
"Operator",
"Null",
"Inline",
"Using",
"Any",
"Void",
"String",
"Bool",
"Float",
"Float32",
"Float64",
"Int",
"U8",
"U16",
"U32",
"U64",
"S8",
"S16",
"S32",
"S64",
"Struct",
"Union",
"Enum",
"SizeOf",
"New",
"Delete",
"Defer",
"Autocast",
"Remove",
"PushContext",
"Uninitialized",
"It",
"ItIndex",
"Context",
"Break",
"Case",
"Continue",
"Default",
"Do",
"Else",
"For",
"Goto",
"If",
"Return",
"Switch",
"While",
"Cast",
"LiteralTrue",
"LiteralFalse",
"Identifier",
"PPInclude",
"PPVersion",
"PPDefine",
"PPUndef",
"PPIfDef",
"PPIfNDef",
"PPElse",
"PPElIf",
"PPEndIf",
"PPError",
"PPUsing",
"PPLine",
"PPIf",
"PPImport",
"PPPragma",
"PPLoad",
"PPUnknown",
"PPDefined",
};
